<?php
/**
 * @file
 * Provides a client for the Axiell Alma library information webservice.
 */


class AlmaSearchClient {
  /**
   * @var AlmaClientBaseURL
   * The base server URL to run the requests against.
   */
  private $base_url;

  /**
   * The salt which will be used to scramble sensitive information across
   * all requests for the page load.
   */
  private static $salt;

  /**
   * Constructor, checking if we have a sensible value for $base_url.
   */
  function __construct($base_url) {
    if (stripos($base_url, 'http') === 0 && filter_var($base_url, FILTER_VALIDATE_URL, FILTER_FLAG_SCHEME_REQUIRED)) {
      $this->base_url = $base_url;
    }
    else {
      // TODO: Use a specialised exception for this.
      throw new Exception('Invalid base URL: ' . $base_url);
    }

    self::$salt = mt_rand();
  }

  /**
   * Perform request to the Alma server.
   *
   * @param string $method
   *    The REST method to call e.g. 'patron/status'. borrCard and pinCode
   *    are required for all request related to library patrons.
   * @param array $params
   *    Query string parameters in the form of key => value.
   * @param boolean $check_status
   *    Check the status element, and throw an exception if it is not ok.
   * @return DOMDocument
   *    A DOMDocument object with the response.
   */
  public function request($method, $params = array(), $check_status = TRUE) {
    $startTime = explode(' ', microtime());
    // For use with a non-Drupal-system, we should have a way to swap
    // the HTTP client out.
    $request = drupal_http_request(url($this->base_url . $method, array('query' => $params)), array('secure_socket_transport' => 'sslv3'));
    $stopTime = explode(' ', microtime());
    // For use with a non-Drupal-system, we should have a way to swap
    // logging and logging preferences out.
    if (variable_get('alma_enable_logging', FALSE)) {
      $seconds = floatval(($stopTime[1] + $stopTime[0]) - ($startTime[1] + $startTime[0]));

      // Filter params to avoid logging sensitive data.
      // This can be disabled by setting alma_logging_filter_params = 0. There is no UI for setting this variable
      // It is intended for settings.php in development environments only.
      $params = (variable_get('alma_logging_filter_params', 1)) ? self::filter_request_params($params) : $params;

      // Log the request
      watchdog('alma', 'Sent request: @url (@seconds s)', array('@url' => url($this->base_url . $method, array('query' => $params)), '@seconds' => $seconds), WATCHDOG_DEBUG);
    }

    if ($request->code == 200) {
      // Since we currently have no need for the more advanced stuff
      // SimpleXML provides, we'll just use DOM, since that is a lot
      // faster in most cases.
      $doc = new DOMDocument();
      $doc->loadXML($request->data);
      if (!$check_status || $doc->getElementsByTagName('status')->item(0)->getAttribute('value') == 'ok') {
        return $doc;
      }
      else {
        $message = $doc->getElementsByTagName('status')->item(0)->getAttribute('key');
        switch ($message) {
          case '':
          default:
            throw new AlmaSearchClientCommunicationError('Status is not okay: ' . $message);
        }
      }
    }
    else {
      throw new AlmaSearchClientHTTPError('Request error: ' . $request->code . $request->error);
    }
  }

  /**
   * Filters sensitive information in request parameters allowing the values to be logged
   *
   * @param array $params An array of request information
   *
   * @return array
   *    An array of filtered request information
   */
  private static function filter_request_params($params) {
    // Scramble sensitive information
    $sensitive = array('borrCard', 'pinCode', 'pinCodeChange', 'address', 'emailAddress');

    $log_params = array();
    foreach ($params as $key => $value) {
      if (in_array($key, $sensitive)) {
        // Replace the value with a scrambled version generated using md5() and
        // the static salt. This way all requests generated by the same page
        // load can be grouped
        $value = substr(md5($value . self::$salt), 0, strlen($value));
      }
      $log_params[$key] = $value;
    }

    return $log_params;
  }
  
  	/**
	* Searches in the DDELibra LMS. Returnes ids from the search result
	*
	* @param string $search_text
	*    Search string in CCL
	* @param string $search_type
	*   One of  native | fullText | namedList. Native is the DDLibra's native search language (CCL)
	* @param $start_no
	*    Where in the search result to start returning the asked for number of records.
	* @param $number_of_records
	*    Number of returned records
	*/
	public function run_lms_search($search_text, $search_type = 'native', $start_no = 1, $number_of_records = 30) {
		$params = array(
			'searchText' => $search_text,
			'searchType' => $search_type,
			'startNo' => $start_no,
			'nofRecords' => $number_of_records
			);
		$doc = $this->request('catalogue/fulltextsearch', $params, FALSE);
		$data = array(
			'request_status' => $doc->getElementsByTagName('status')->item(0)->getAttribute('value'),
			'number_of_records' => $doc->getElementsByTagName('nofRecords')->item(0)->nodeValue,
			'number_of_records_total' => $doc->getElementsByTagName('nofRecordsTotal')->item(0)->nodeValue,
			'start_number' => $doc->getElementsByTagName('startNo')->item(0)->nodeValue,
			'stop_number' => $doc->getElementsByTagName('stopNo')->item(0)->nodeValue,
			'alma_ids' => array(),
			);
		foreach ($doc->getElementsByTagName('catalogueRecord') as $elem) {
			$data['alma_ids'][] = $elem->getAttribute('id');
		}

		return $data;
	}

 

}

/**
 * Define exceptions for different error conditions inside the Alma client.
 */

class AlmaSearchClientInvalidURLError extends Exception { }


class AlmaSearchClientHTTPError extends Exception { }


class AlmaSearchClientCommunicationError extends Exception { }



